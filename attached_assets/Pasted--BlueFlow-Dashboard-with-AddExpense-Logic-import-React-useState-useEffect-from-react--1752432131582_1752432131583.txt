// BlueFlow ‚Äì Dashboard with AddExpense Logic
import React, { useState, useEffect } from 'react';

export default function BlueFlowDashboard() {
  const [showAddExpense, setShowAddExpense] = useState(false);
  const [expenses, setExpenses] = useState([]);
  const [budget, setBudget] = useState(500);
  const [remainingBudget, setRemainingBudget] = useState(500);

  useEffect(() => {
    const savedExpenses = JSON.parse(localStorage.getItem('blueflow_expenses')) || [];
    setExpenses(savedExpenses);
  }, []);

  useEffect(() => {
    const totalSpent = expenses.reduce((acc, curr) => acc + parseFloat(curr.amount), 0);
    setRemainingBudget(budget - totalSpent);
    localStorage.setItem('blueflow_expenses', JSON.stringify(expenses));
  }, [expenses, budget]);

  return (
    <div style={styles.appWrapper}>
      <header style={styles.header}>
        <h1 style={styles.balance}>$3,200</h1>
        <button style={styles.glassButton}>Update Balance</button>
      </header>

      <main style={styles.dashboard}>
        {!showAddExpense ? (
          <>
            <div style={styles.card}>
              <p style={styles.title}>Weekly Budget</p>
              <p style={styles.amount}>${remainingBudget.toFixed(2)}</p>
            </div>
            <button style={styles.addButton} onClick={() => setShowAddExpense(true)}>
              + Add Expense
            </button>
          </>
        ) : (
          <AddExpenseForm onClose={() => setShowAddExpense(false)} onSave={setExpenses} currentExpenses={expenses} />
        )}
      </main>

      <nav style={styles.navbar}>
        <div style={styles.navIcon}>üè†</div>
        <div style={styles.navIcon}>üí∞</div>
        <div style={styles.navIcon}>üìú</div>
        <div style={styles.navIcon}>üìä</div>
      </nav>

      <div style={styles.aiAssistant}>ü§ñ</div>
    </div>
  );
}

function AddExpenseForm({ onClose, onSave, currentExpenses }) {
  const [name, setName] = useState('');
  const [amount, setAmount] = useState('');
  const [category, setCategory] = useState('Food');
  const [date, setDate] = useState('');

  const handleSave = () => {
    if (!name || !amount || !date) return;
    const newExpense = { name, amount: parseFloat(amount), category, date };
    onSave([...currentExpenses, newExpense]);
    onClose();
  };

  return (
    <div style={styles.card}>
      <h2 style={styles.title}>Add a New Expense</h2>
      <input style={styles.input} placeholder="Expense Name" value={name} onChange={e => setName(e.target.value)} />
      <input style={styles.input} placeholder="Amount" type="number" value={amount} onChange={e => setAmount(e.target.value)} />
      <select style={styles.input} value={category} onChange={e => setCategory(e.target.value)}>
        <option>Food</option>
        <option>Transport</option>
        <option>Fun</option>
        <option>Other</option>
      </select>
      <input style={styles.input} type="date" value={date} onChange={e => setDate(e.target.value)} />
      <div style={{ display: 'flex', gap: '10px', marginTop: '1rem' }}>
        <button style={styles.glassButton} onClick={onClose}>Cancel</button>
        <button style={styles.addButton} onClick={handleSave}>Save</button>
      </div>
    </div>
  );
}

const styles = {
  appWrapper: {
    background: 'linear-gradient(145deg, #E3D9FF, #CDE7F9)',
    minHeight: '100vh',
    fontFamily: 'Helvetica Neue, sans-serif',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    padding: '1rem',
    position: 'relative',
  },
  header: {
    width: '100%',
    marginBottom: '1rem',
    textAlign: 'center',
  },
  balance: {
    fontSize: '2rem',
    color: '#3C3D65',
  },
  glassButton: {
    background: 'rgba(255, 255, 255, 0.2)',
    backdropFilter: 'blur(10px)',
    border: 'none',
    borderRadius: '12px',
    padding: '10px 20px',
    color: '#3C3D65',
    fontWeight: 'bold',
    boxShadow: '0 4px 15px rgba(0,0,0,0.1)',
    cursor: 'pointer',
  },
  dashboard: {
    width: '100%',
    flex: 1,
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    gap: '1rem',
  },
  card: {
    background: 'rgba(255, 255, 255, 0.3)',
    borderRadius: '20px',
    padding: '20px',
    width: '90%',
    boxShadow: '0 8px 30px rgba(0,0,0,0.1)',
    textAlign: 'center',
  },
  title: {
    color: '#9E71E6',
    fontSize: '1.1rem',
  },
  amount: {
    fontSize: '1.8rem',
    fontWeight: 'bold',
    color: '#3C3D65',
  },
  addButton: {
    background: 'linear-gradient(135deg, #FFB5E8, #FFC48C)',
    color: '#3C3D65',
    border: 'none',
    borderRadius: '50px',
    padding: '10px 25px',
    fontSize: '1.2rem',
    fontWeight: 'bold',
    boxShadow: '0 4px 20px rgba(0,0,0,0.15)',
    cursor: 'pointer',
  },
  input: {
    width: '100%',
    padding: '10px',
    borderRadius: '12px',
    border: 'none',
    marginTop: '10px',
    fontSize: '1rem',
    background: 'rgba(255, 255, 255, 0.6)',
    boxShadow: 'inset 0 2px 5px rgba(0,0,0,0.05)',
  },
  navbar: {
    width: '100%',
    display: 'flex',
    justifyContent: 'space-around',
    padding: '10px 0',
    background: 'rgba(255, 255, 255, 0.2)',
    backdropFilter: 'blur(12px)',
    borderRadius: '30px',
    position: 'fixed',
    bottom: '10px',
  },
  navIcon: {
    fontSize: '1.5rem',
    color: '#3C3D65',
  },
  aiAssistant: {
    position: 'fixed',
    bottom: '80px',
    right: '20px',
    width: '60px',
    height: '60px',
    background: 'linear-gradient(135deg, #A87FEF, #FFB5E8)',
    borderRadius: '50%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    boxShadow: '0 0 15px #FFB5E8',
    cursor: 'pointer',
  },
};
